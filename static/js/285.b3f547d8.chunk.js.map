{"version":3,"file":"static/js/285.b3f547d8.chunk.js","mappings":"+HAEO,SAASA,EAAoBC,GAChC,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,GAmBvC,OAjBAK,EAAAA,EAAAA,YAAU,KACND,GAAW,GACXE,MAAM,kDAADC,OAAmDV,IACvDW,MAAKC,GAAYA,EAASC,SAC1BF,MAAMG,IAAU,IAADC,EACZb,GAAec,IACX,MAAMC,EAAeH,EAAKI,QAAQC,QAAQC,IAAaJ,EAAcK,MAAKC,GAAWA,EAAQC,KAAOH,EAASG,OAC7G,MAAO,IAAIP,KAAkBC,EAAa,IAE9CZ,EAA+B,QAAX,QAATU,EAAAD,EAAKU,YAAI,IAAAT,OAAA,EAATA,EAAWU,OACtBlB,GAAW,EAAM,IAEpBmB,OAAMC,GAAKC,QAAQC,MAAMF,EAAEG,WAC3BC,SAAQ,IAAMxB,GAAW,IAAO,GAElC,CAACP,IAEG,CACHC,aACAG,UACAE,UAER,C,iGCxBO,SAAS0B,IACZ,MAAMC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,IACrB,UAACC,EAAS,aAAEC,GAAgBJ,EAC5BK,GAAWC,EAAAA,EAAAA,OAEjB/B,EAAAA,EAAAA,YAAU,KACH4B,EAAY,GACXC,EAAa,EACjB,GAED,IAEH,MAAM,QAAEjC,EAAO,QAAEE,EAAO,WAAEL,IAAeF,EAAAA,EAAAA,GAAoBqC,GACvDI,GAAWC,EAAAA,EAAAA,UAGXC,GAAcC,EAAAA,EAAAA,cAAaC,IACtBtC,IAIAkC,EAASK,SACRL,EAASK,QAAQC,aAGrBN,EAASK,QAAU,IAAIE,sBAAsBC,IACtCA,EAAQ,GAAGC,gBAAkB7C,GAC5BiC,GAAaa,GAAaA,EAAY,GAC1C,IAGDN,GACCJ,EAASK,QAAQM,QAAQP,GAC7B,GAEL,CAACtC,EAASF,EAASiC,IAEtB,OACIe,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,KACPD,EAAAA,EAAAA,KAAA,MAAIE,UAAU,WAAUH,SAAC,4DACzBF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,eAAcH,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIE,UAAU,mBAAkBH,SAC1BrD,EAAWyD,KAAI,CAACC,EAAWC,KAClBR,EAAAA,EAAAA,MAAA,MAAIS,IAAK5D,EAAW6D,SAAWF,EAAQ,EAAIlB,EAAc,KAAyBqB,QAASA,IAAMzB,EAAS,eAAD5B,OAAgBiD,EAAUpC,IAAM,CAC5IyC,MAAOL,EAAUpC,KACjBkC,UAAU,uBAAsBH,SAAA,EAACC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,MAAMQ,IAAKN,EAAUO,MAAOC,IAAKR,EAAUS,QAAQb,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAUS,SAF1CT,EAAUpC,QAM5FjB,IAAWiD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,UAASH,SAAC,mFAIrD,C","sources":["components/useSearchCharacters.jsx","pages/Characters.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nexport function useSearchCharacters(n) {\r\n    const [characters, setCharacters] = useState([])\r\n    const [hasMore, setHasMore] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetch(`https://rickandmortyapi.com/api/character?page=${n}`)\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            setCharacters((prevLocations) => {\r\n                const newLocations = data.results.filter((location => !prevLocations.some(prevLoc => prevLoc.id === location.id)))\r\n                return [...prevLocations, ...newLocations];\r\n            });\r\n            setHasMore(data.info?.next !== null);\r\n            setLoading(false);\r\n        })\r\n        .catch(e => console.error(e.message))\r\n        .finally(() => setLoading(false));\r\n\r\n    }, [n])\r\n\r\n    return {\r\n        characters,\r\n        hasMore,\r\n        loading\r\n    }\r\n}","import { useCallback, useContext, useEffect, useRef } from \"react\"\r\nimport { Outlet, useNavigate } from \"react-router-dom\"\r\nimport { useSearchCharacters } from \"../components/useSearchCharacters\"\r\nimport { AppContext } from \"../context\"\r\n\r\nexport function Characters() {\r\n    const context = useContext(AppContext)\r\n    const {qualityCh, setQualityCh} = context \r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if(qualityCh > 1) {\r\n            setQualityCh(1)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    \r\n    const { hasMore, loading, characters } = useSearchCharacters(qualityCh)\r\n    const observer = useRef()\r\n\r\n\r\n    const lastNodeRef = useCallback((node) => {\r\n            if(loading) {\r\n                return\r\n            }\r\n    \r\n            if(observer.current) {\r\n                observer.current.disconnect()\r\n            }\r\n    \r\n            observer.current = new IntersectionObserver((entries) => {\r\n                if(entries[0].isIntersecting && hasMore) {\r\n                    setQualityCh(prevState => prevState + 1)\r\n                }\r\n            })\r\n    \r\n            if(node) {\r\n                observer.current.observe(node)\r\n            }\r\n    \r\n    }, [loading, hasMore, setQualityCh])\r\n\r\n    return (\r\n        <>\r\n            <Outlet />\r\n            <h2 className=\"subtitle\">Персонажи</h2>\r\n            <div className=\"main_content\">\r\n                <ul className=\"list heroes_list\">\r\n                    { characters.map((character, index) => {\r\n                        return <li ref={characters.length === index + 1 ? lastNodeRef : null} key={character.id} onClick={() => navigate(`/characters/${character.id}`, {\r\n                            state: character.id\r\n                        })} className=\"list_item heroy_item\"><img className=\"img\" src={character.image} alt={character.name} /><p>{character.name}</p>\r\n                        </li>\r\n                    })}    \r\n                </ul>    \r\n                {loading && <div className=\"loading\">Идет загрузка</div>}  \r\n            </div>\r\n        </>\r\n    )\r\n}"],"names":["useSearchCharacters","n","characters","setCharacters","useState","hasMore","setHasMore","loading","setLoading","useEffect","fetch","concat","then","response","json","data","_data$info","prevLocations","newLocations","results","filter","location","some","prevLoc","id","info","next","catch","e","console","error","message","finally","Characters","context","useContext","AppContext","qualityCh","setQualityCh","navigate","useNavigate","observer","useRef","lastNodeRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevState","observe","_jsxs","_Fragment","children","_jsx","Outlet","className","map","character","index","ref","length","onClick","state","src","image","alt","name"],"sourceRoot":""}