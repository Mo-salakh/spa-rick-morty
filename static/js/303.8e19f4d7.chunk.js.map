{"version":3,"file":"static/js/303.8e19f4d7.chunk.js","mappings":"+HAEO,SAASA,EAAkBC,GAC9B,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,GAmBvC,OAjBAK,EAAAA,EAAAA,YAAU,KACND,GAAW,GACXE,MAAM,gDAADC,OAAiDV,IACrDW,MAAKC,GAAYA,EAASC,SAC1BF,MAAMG,IAAU,IAADC,EACZb,GAAac,IACT,MAAMC,EAAcH,EAAKI,QAAQC,QAAQC,IAAaJ,EAAaK,MAAKC,GAAWA,EAAQC,KAAOH,EAASG,OAC3G,MAAO,IAAIP,KAAiBC,EAAY,IAE5CZ,EAA+B,QAAX,QAATU,EAAAD,EAAKU,YAAI,IAAAT,OAAA,EAATA,EAAWU,OACtBlB,GAAW,EAAM,IAEpBmB,OAAMC,GAAKC,QAAQC,MAAMF,EAAEG,WAC3BC,SAAQ,IAAMxB,GAAW,IAAO,GAElC,CAACP,IAEG,CACHC,WACAG,UACAE,UAER,C,+FCxBO,SAAS0B,IAEZ,MAAMC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GACrBC,GAAWC,EAAAA,EAAAA,OACX,SAAEC,EAAQ,YAAEC,GAAgBN,GAElCzB,EAAAA,EAAAA,YAAU,KACH8B,EAAW,GACVC,EAAY,EAChB,GAED,IAEH,MAAM,QAACjC,EAAO,SAAEL,EAAQ,QAAEG,IAAWL,EAAAA,EAAAA,GAAkBuC,GACjDE,GAAWC,EAAAA,EAAAA,UAEXC,GAAcC,EAAAA,EAAAA,cAAaC,IAC1BtC,IAIAkC,EAASK,SACRL,EAASK,QAAQC,aAGrBN,EAASK,QAAU,IAAIE,sBAAsBC,IACtCA,EAAQ,GAAGC,gBAAkB7C,GAC5BmC,GAAYW,GAAaA,EAAY,GACzC,IAGDN,GACCJ,EAASK,QAAQM,QAAQP,GAC7B,GAED,CAACtC,EAASF,EAASmC,IAGtB,OACIa,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,KACPD,EAAAA,EAAAA,KAAA,MAAIE,UAAU,WAAUH,SAAC,gDACzBF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,eAAcH,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIE,UAAU,oBAAmBH,SAC3BrD,EAASyD,KAAI,CAACC,EAASC,KACdR,EAAAA,EAAAA,MAAA,MAAIS,IAAK5D,EAAS6D,SAAWF,EAAQ,EAAIlB,EAAc,KAAuBqB,QAASA,IAAM3B,EAAS,aAAD1B,OAAciD,EAAQpC,KAAOkC,UAAU,yBAAwBH,SAAA,EACvKF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,WAASK,EAAQpC,OACrBgC,EAAAA,EAAAA,KAAA,MAAAD,SAAKK,EAAQK,QACbZ,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,SAAOK,EAAQM,cAHmDN,EAAQpC,QAOxFjB,IAAWiD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,UAASH,SAAC,mFAIrD,C","sources":["components/useSeacrhEpisodes.jsx","pages/Episodes.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nexport function useSearchEpisodes(n) {\r\n    const [episodes, setEpisodes] = useState([])\r\n    const [hasMore, setHasMore] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetch(`https://rickandmortyapi.com/api/episode?page=${n}`)\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            setEpisodes((prevEpisodes) => {\r\n                const newEpisodes = data.results.filter((location => !prevEpisodes.some(prevLoc => prevLoc.id === location.id)))\r\n                return [...prevEpisodes, ...newEpisodes];\r\n            });\r\n            setHasMore(data.info?.next !== null);\r\n            setLoading(false);\r\n        })\r\n        .catch(e => console.error(e.message))\r\n        .finally(() => setLoading(false));\r\n\r\n    }, [n])\r\n\r\n    return {\r\n        episodes,\r\n        hasMore,\r\n        loading\r\n    }\r\n}","import { useCallback, useContext, useEffect, useRef } from \"react\"\r\nimport { Outlet, useNavigate } from \"react-router-dom\"\r\nimport { AppContext } from \"../context\"\r\nimport { useSearchEpisodes } from \"../components/useSeacrhEpisodes\"\r\n\r\nexport function Episodes() {\r\n\r\n    const context = useContext(AppContext)\r\n    const navigate = useNavigate()\r\n    const { qualityE, setQualityE } = context\r\n\r\n    useEffect(() => {\r\n        if(qualityE > 1) {\r\n            setQualityE(1)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    \r\n    const {loading, episodes, hasMore} = useSearchEpisodes(qualityE)\r\n    const observer = useRef()\r\n\r\n    const lastNodeRef = useCallback((node) => {\r\n        if(loading) {\r\n            return;\r\n        }\r\n\r\n        if(observer.current) {\r\n            observer.current.disconnect()\r\n        }\r\n\r\n        observer.current = new IntersectionObserver((entries) => {\r\n            if(entries[0].isIntersecting && hasMore) {\r\n                setQualityE(prevState => prevState + 1)\r\n            }\r\n        })\r\n\r\n        if(node) {\r\n            observer.current.observe(node)\r\n        }\r\n\r\n    }, [loading, hasMore, setQualityE])\r\n\r\n\r\n    return (\r\n        <>  \r\n            <Outlet />\r\n            <h2 className=\"subtitle\">Эпизоды</h2>\r\n            <div className=\"main_content\">\r\n                <ul className=\"list episode_list\">\r\n                    { episodes.map((episode, index) => {\r\n                        return <li ref={episodes.length === index + 1 ? lastNodeRef : null} key={episode.id} onClick={() => navigate(`/episodes/${episode.id}`)} className=\"list_item episode_item\">\r\n                            <h2>Episode {episode.id}</h2>\r\n                            <h3>{episode.name}</h3>\r\n                            <p>Date: {episode.air_date}</p>\r\n                        </li>\r\n                    })}    \r\n                </ul>    \r\n                {loading && <div className=\"loading\">Идет загрузка</div>}  \r\n            </div>\r\n        </>\r\n    )\r\n}"],"names":["useSearchEpisodes","n","episodes","setEpisodes","useState","hasMore","setHasMore","loading","setLoading","useEffect","fetch","concat","then","response","json","data","_data$info","prevEpisodes","newEpisodes","results","filter","location","some","prevLoc","id","info","next","catch","e","console","error","message","finally","Episodes","context","useContext","AppContext","navigate","useNavigate","qualityE","setQualityE","observer","useRef","lastNodeRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevState","observe","_jsxs","_Fragment","children","_jsx","Outlet","className","map","episode","index","ref","length","onClick","name","air_date"],"sourceRoot":""}