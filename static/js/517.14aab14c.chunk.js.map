{"version":3,"file":"static/js/517.14aab14c.chunk.js","mappings":"+HAEO,SAASA,EAAmBC,GAC/B,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,GAmBvC,OAjBAK,EAAAA,EAAAA,YAAU,KACND,GAAW,GACXE,MAAM,iDAADC,OAAkDV,IACtDW,MAAKC,GAAYA,EAASC,SAC1BF,MAAMG,IAAU,IAADC,EACZb,GAAcc,IACV,MAAMC,EAAeH,EAAKI,QAAQC,QAAQC,IAAaJ,EAAcK,MAAKC,GAAWA,EAAQC,KAAOH,EAASG,OAC7G,MAAO,IAAIP,KAAkBC,EAAa,IAE9CZ,EAA+B,QAAX,QAATU,EAAAD,EAAKU,YAAI,IAAAT,OAAA,EAATA,EAAWU,OACtBlB,GAAW,EAAM,IAEpBmB,OAAMC,GAAKC,QAAQC,MAAMF,EAAEG,WAC3BC,SAAQ,IAAMxB,GAAW,IAAO,GAElC,CAACP,IAEG,CACHC,YACAG,UACAE,UAER,C,gGCxBO,SAAS0B,IACZ,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,UACXC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,IACrB,SAACC,EAAQ,YAAEC,GAAeJ,GAChC7B,EAAAA,EAAAA,YAAU,KACHgC,EAAW,GACVC,EAAY,EAChB,GAED,IAEH,MAAM,UAACxC,EAAS,QAAEK,EAAO,QAAEF,IAAWL,EAAAA,EAAAA,GAAmByC,GAGnDE,GAAcC,EAAAA,EAAAA,cAAaC,IAC1BtC,IAIA6B,EAASU,SACRV,EAASU,QAAQC,aAGrBX,EAASU,QAAU,IAAIE,sBAAsBC,IACtCA,EAAQ,GAAGC,gBAAkB7C,GAC5BqC,GAAYS,GAAaA,EAAY,GACzC,IAGDN,GACCT,EAASU,QAAQM,QAAQP,GAC7B,GAED,CAACtC,EAASF,EAASqC,IAGtB,OACIW,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,KACPD,EAAAA,EAAAA,KAAA,MAAIE,UAAU,WAAUH,SAAC,gDACzBF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,eAAcH,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAIE,UAAU,qBAAoBH,SAC7BrD,EAAUyD,KAAI,CAACtC,EAAUuC,KAElBP,EAAAA,EAAAA,MAAA,MAEIQ,IAAK3D,EAAU4D,SAAWF,EAAQ,EAAIjB,EAAc,KACpDoB,QAASA,IAAM7B,EAAS,cAADvB,OAAeU,EAASG,KAC/CkC,UAAU,0BAAyBH,SAAA,EAEnCF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,YAAUlC,EAASG,OACvBgC,EAAAA,EAAAA,KAAA,MAAAD,SAAKlC,EAAS2C,QACdX,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,SAAOlC,EAAS4C,UAPd5C,EAASG,QAazBjB,IAAWiD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,UAASH,SAAC,mFAIrD,C","sources":["components/useSearchLoactions.jsx","pages/Locations.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport function useSearchLocations(n) {\r\n    const [locations, setLocations] = useState([])\r\n    const [hasMore, setHasMore] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetch(`https://rickandmortyapi.com/api/location?page=${n}`)\r\n        .then(response => response.json())\r\n        .then((data) => {\r\n            setLocations((prevLocations) => {\r\n                const newLocations = data.results.filter((location => !prevLocations.some(prevLoc => prevLoc.id === location.id)))\r\n                return [...prevLocations, ...newLocations];\r\n            });\r\n            setHasMore(data.info?.next !== null);\r\n            setLoading(false);\r\n        })\r\n        .catch(e => console.error(e.message))\r\n        .finally(() => setLoading(false));\r\n\r\n    }, [n])\r\n\r\n    return {\r\n        locations,\r\n        hasMore,\r\n        loading\r\n    }\r\n}","import { useCallback, useContext, useEffect, useRef } from \"react\"\r\nimport { Outlet, useNavigate } from \"react-router-dom\"\r\nimport { useSearchLocations } from \"../components/useSearchLoactions\"\r\nimport { AppContext } from \"../context\"\r\n\r\nexport function Locations() {\r\n    const navigate = useNavigate()\r\n    const observer = useRef()\r\n    const context = useContext(AppContext)    \r\n    const {qualityL, setQualityL} = context \r\n    useEffect(() => {\r\n        if(qualityL > 1) {\r\n            setQualityL(1)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const {locations, loading, hasMore} = useSearchLocations(qualityL)\r\n    \r\n\r\n    const lastNodeRef = useCallback((node) => {\r\n        if(loading) {\r\n            return\r\n        }\r\n\r\n        if(observer.current) {\r\n            observer.current.disconnect()\r\n        }\r\n\r\n        observer.current = new IntersectionObserver((entries) => {\r\n            if(entries[0].isIntersecting && hasMore) {\r\n                setQualityL(prevState => prevState + 1)\r\n            }\r\n        })\r\n\r\n        if(node) {\r\n            observer.current.observe(node)\r\n        }\r\n\r\n    }, [loading, hasMore, setQualityL])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Outlet />\r\n            <h2 className=\"subtitle\">Локации</h2>\r\n            <div className=\"main_content\">\r\n            <ul className=\"list location_list\">\r\n                {locations.map((location, index) => {\r\n                    return (\r\n                        <li \r\n                            key={location.id} \r\n                            ref={locations.length === index + 1 ? lastNodeRef : null} \r\n                            onClick={() => navigate(`/locations/${location.id}`)} \r\n                            className=\"list_item location_item\"\r\n                        >\r\n                            <h2>location {location.id}</h2>\r\n                            <h3>{location.name}</h3>\r\n                            <p>Type: {location.type}</p>\r\n                        </li>\r\n                    );\r\n                })}\r\n            </ul>\r\n\r\n                {loading && <div className=\"loading\">Идет загрузка</div>}    \r\n            </div>\r\n        </>\r\n    )\r\n}"],"names":["useSearchLocations","n","locations","setLocations","useState","hasMore","setHasMore","loading","setLoading","useEffect","fetch","concat","then","response","json","data","_data$info","prevLocations","newLocations","results","filter","location","some","prevLoc","id","info","next","catch","e","console","error","message","finally","Locations","navigate","useNavigate","observer","useRef","context","useContext","AppContext","qualityL","setQualityL","lastNodeRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevState","observe","_jsxs","_Fragment","children","_jsx","Outlet","className","map","index","ref","length","onClick","name","type"],"sourceRoot":""}